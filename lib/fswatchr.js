// Generated by CoffeeScript 1.3.3
(function() {
  var DirWalker, EventEmitter, FSWatchr, async, fs, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  fs = require('fs');

  path = require('path');

  async = require('async');

  DirWalker = require('dirwalker');

  module.exports = FSWatchr = (function(_super) {

    __extends(FSWatchr, _super);

    function FSWatchr(dir) {
      this.dir = dir != null ? dir : process.cwd();
      this.stats = {};
      this.watchers = {};
    }

    FSWatchr.prototype._checkMtime = function(filename, newstats) {
      var oldstats, _ref, _ref1, _ref2;
      oldstats = (_ref = this.stats[path.dirname(filename)]) != null ? _ref[filename] : void 0;
      if ((oldstats != null ? (_ref1 = oldstats.mtime) != null ? _ref1.getTime() : void 0 : void 0) === (newstats != null ? (_ref2 = newstats.mtime) != null ? _ref2.getTime() : void 0 : void 0)) {
        return true;
      } else {
        return false;
      }
    };

    FSWatchr.prototype._getAction = function(event, filename, stats) {
      var _ref;
      switch (event) {
        case 'rename':
          if ((((_ref = this.stats[path.dirname(filename)]) != null ? _ref[filename] : void 0) != null) && !(stats != null)) {
            return 'removed';
          } else {
            return 'created';
          }
        case 'change':
          if (this._checkMtime(filename, stats)) {
            return 'unchanged';
          } else {
            return 'changed';
          }
      }
    };

    FSWatchr.prototype._close = function(dirname) {
      var _ref, _ref1;
      if ((_ref = this.watchers[dirname]) != null) {
        _ref.close();
      }
      delete this.watchers[dirname];
      delete this.stats[dirname];
      return (_ref1 = this.stats[path.dirname(dirname)]) != null ? delete _ref1[dirname] : void 0;
    };

    FSWatchr.prototype.watch = function(dirname) {
      var dirwalker, v, _fn, _i, _len, _ref,
        _this = this;
      if (dirname == null) {
        dirname = this.dir;
      }
      dirwalker = new DirWalker(dirname);
      if (this.filter) {
        dirwalker.setFilter(this.filter);
      }
      _ref = dirwalker.FILE_TYPES;
      _fn = function(type) {
        return dirwalker.on(type, function(file, stat) {
          return _this.emit("" + type + " found", file, stat);
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        _fn(v);
      }
      dirwalker.on('read', function(dirpath, dirstats) {
        _this.stats[dirpath] = dirstats;
        _this.watchers[dirpath] = fs.watch(dirpath, function(event, filename) {
          var p;
          p = path.join(dirpath, filename);
          return fs.lstat(p, function(err, stat) {
            var action, type, _ref1, _ref2, _ref3;
            if (((stat != null) || (((_ref1 = _this.stats[dirpath]) != null ? _ref1[p] : void 0) != null)) && !(typeof _this.filter === "function" ? _this.filter(p, stat) : void 0)) {
              action = _this._getAction(event, p, stat);
              type = dirwalker.getFileType(stat != null ? stat : (_ref2 = _this.stats[dirpath]) != null ? _ref2[p] : void 0);
              if (action === 'removed' && (((_ref3 = _this.stats[dirpath]) != null ? _ref3[p] : void 0) != null)) {
                delete _this.stats[dirpath][p];
              } else if (stat != null) {
                _this.stats[dirpath][p] = stat;
              }
              if (!!type) {
                _this.emit("" + type + " " + action, p, stat);
              }
              if (type === 'Directory') {
                if (action === 'created') {
                  return _this.watch(p);
                } else if (action === 'removed') {
                  return _this._close(p);
                }
              }
            }
          });
        });
        return _this.emit("watchstart", dirpath, _this.stats[dirpath]);
      });
      dirwalker.on('end', function() {
        var flatstats, k, k2, v2, _ref1;
        flatstats = {};
        _ref1 = _this.stats;
        for (k in _ref1) {
          v = _ref1[k];
          for (k2 in v) {
            v2 = v[k2];
            flatstats[k2] = v2;
          }
        }
        return _this.emit("watchset", dirname, flatstats);
      });
      return dirwalker.walk();
    };

    FSWatchr.prototype.kill = function() {
      var k, v, _ref;
      _ref = this.watchers;
      for (k in _ref) {
        v = _ref[k];
        v.close();
      }
      return this.stats = {};
    };

    FSWatchr.prototype.setFilter = function(fn) {
      if (typeof fn === 'function') {
        return this.filter = fn;
      }
    };

    return FSWatchr;

  })(EventEmitter);

}).call(this);
